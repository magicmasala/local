import tensorflow as tf
import pandas as pd
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D ,Dense,Flatten
import numpy as np
import matplotlib.pyplot as plt
import random




#Load Dataset
x_train=np.loadtxt('input.csv', delimiter =',')
y_train=np.loadtxt('labels.csv',delimiter =',')
x_test=np.loadtxt('input_test.csv',delimiter =',')
y_test=np.loadtxt('labels_test.csv', delimiter =',')



#Reshaping appropriate size..removing comma
x_train = x_train.reshape(len(x_train),100,100,3)
y_train= y_train.reshape(len(y_train),1)

x_test = x_test.reshape(len(x_test),100,100,3)
y_test= y_test.reshape(len(y_test),1)






#feature scaling
x_train = x_train/255
x_test = x_test/255


#define the network architecture usig keras
model = tf.keras.Sequential([
    tf.keras.layers.Flatten(input_shape=(100,100,3)),
    tf.keras.layers.Dense(128, activation='relu'),  #Fully connected layers
    tf.keras.layers.Dense(10, activation='softmax')
])
model.summary()


#train the model using SGD
model.compile(optimizer='sgd',
             loss='sparse_categorical_crossentropy',
             metrics=['accuracy'])
history=model.fit(x_train, y_train,validation_data=(x_test,y_test), epochs=10)


#evaluate the network
#means calculating loss and accuracy on testing data
test_loss, test_acc=model.evaluate(x_test, y_test)
print("Loss=", test_loss)
print("Accuracy=", test_acc)


#f. plot the training loss and accuracy
pd.DataFrame(history.history).plot()