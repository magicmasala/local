import numpy as np 
import pandas as pd
import keras 
import tensorflow as tf
from sklearn.model_selection import train_test_split 
from keras.utils import to_categorical 




# a. Loading and preprocessing the image data
train_df = pd.read_csv('fashion-mnist_train.csv')
test_df = pd.read_csv('fashion-mnist_test.csv')



train_df.head()



# Seperating the labels from the features
train_data = np.array(train_df.iloc[:, 1:])
test_data = np.array(test_df.iloc[:, 1:])





# Converting Numerical Label into Categorical Label
train_labels = to_categorical(train_df.iloc[:, 0])
test_labels = to_categorical(test_df.iloc[:, 0])







# Reshaping the data
train_data = train_data.reshape(train_data.shape[0], 28, 28, 1)
test_data = test_data.reshape(test_data.shape[0], 28, 28, 1)
train_data = train_data.astype('float32')
test_data = test_data.astype('float32')




# Feature Scaling
train_data /= 255
test_data /= 255




# Train Test Split
x_train, x_val, y_train, y_val = train_test_split(train_data, train_labels, test_size=0.2)




# b. Defining the model’s architecture
model = tf.keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])




# c. Training the model
model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])
history = model.fit(x_train, y_train, batch_size=20, epochs=5, verbose=2, validation_data=(x_val, y_val))





# d. Estimating the model’s performance
test_loss, test_acc = model.evaluate(test_data, test_labels, verbose=0)
print("Loss =", test_loss)
print("Accuracy =", test_acc)

